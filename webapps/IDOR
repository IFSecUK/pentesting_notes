What is an IDOR?
	-> IDOR stands for Insecure Direct Object Reference and is a type of access control vulnerability. An access control vulnerability is when an attacker can gain access to information or actions not intended for them.
	-> An IDOR vulnerability can occur when a web server receives user-supplied input to retrieve objects (files, data, documents), and too much trust has been placed on that input data, and the web application does not validate whether the user should, in fact, have access to the requested object.

How to find an IDOR?
	1. Query Component:
		-> Query component data is passed in the URL when making a request to a website. Take, for instance, the following screenshot of an URL.
			https://website.thm/profile?id=23

		-> Here we can see the /profile page is being requested, and the parameter id with the value of 23 is being passed in the query component. This page could potentially be showing us personal user information, and by changing the id parameter to another value, we could view other users data.

	2. POST variables:
		-> Examining the contents of forms on a website can sometimes reveal fields that could be vulnerable to IDOR exploitation.
		->  Take, for example, the following HTML code for a form that updates a user's password.
			<form method="POST" action="/update-password">
   				 <input type="hidden" name"user_id" value="123">
    			 <div>New Password:</div>
    			 <div><input type="password" name="new_password"></div>
    			 <div><input type="submit" value="Change Password">
			</form>

		-> You can see from the highlighted line that the user's id is being passed to the webserver in a hidden field. Changing the value of this field from 123 to another user_id may result in changing the password for another user's account.

	3. Cookies:
		-> To stay logged into a website such as this one, cookies are used to remember your session. Usually, this will involve sending a session id which is a long string of random hard to guess text such as 5db28452c4161cf88c6f33e57b62a357, which the webserver securely uses to retrieve your user information and validate your session.

		-> Sometimes though, less experienced developers may store user information in the cookie its self, such as the user's ID. Changing the value of this cookie could result in displaying another user's information. See below for an example of how this might look.


		GET /user-information HTTP/1.1
		Host: website.thm
		Cookie: user_id=9
		User-Agent: Mozilla/5.0 (Ubuntu;Linux) Firefox/94.0

		Hello Jon!



		GET /user-information HTTP/1.1
		Host: website.thm
		Cookie: user_id=5
		User-Agent: Mozilla/5.0 (Ubuntu;Linux) Firefox/94.0

		Hello Martin!


	


