
Username Enumeration
	-> Website error messages are great resources for collating this information to build our list of valid usernames.
	-> If you try entering the username admin and fill in the other form fields with fake information, you'll see we get the error An account with this username already exists. We can use the existence of this error message to produce a list of valid usernames already signed up on the system by using the ffuf tool below. The ffuf tool uses a list of commonly used usernames to check against for any matches.

	>ffuf -u http://10.10.29.149/customers/signup -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -w /usr/share/seclists/Usernames/Names/names.txt -H "Content-Type: application/x-www-form-urlencoded" -mr "An account with this username already exists"


Brute Force
	-> A brute force attack is an automated process that tries a list of commonly used passwords against either a single username or, like in our case, a list of usernames.
	-> When running this command, make sure the terminal is in the same directory as the valid_usernames.txt file.
	
	>ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://MACHINE_IP/customers/login -fc 200

Logic Flaw
	-> Sometimes authentication processes contain logic flaws. A logic flaw is when the typical logical path of an application is either bypassed, circumvented or manipulated by a hacker. 

	Example:
		The below mock code example checks to see whether the start of the path the client is visiting begins with /admin and if so, then further checks are made to see whether the client is, in fact, an admin. If the page doesn't begin with /admin, the page is shown to the client.

		if( url.substr(0,6) === '/admin') {
    		# Code to check user is an admin
		} else {
    		# View Page
		}

		Because the above PHP code example uses three equals signs (===), it's looking for an exact match on the string, including the same letter casing. The code presents a logic flaw because an unauthenticated user requesting /adMin will not have their privileges checked and have the page displayed to them, totally bypassing the authentication checks.


Cookie Tampering
	-> Examining and editing the cookies set by the web server during your online session can have multiple outcomes, such as unauthenticated access, access to another user's account, or elevated privileges.

	-> The contents of some cookies can be in plain text, and it is obvious what they do. Take, for example, if these were the cookie set after a successful login:

		Set-Cookie: logged_in=true; Max-Age=3600; Path=/
		Set-Cookie: admin=false; Max-Age=3600; Path=/

	-> Hashing: Sometimes cookie values can look like a long string of random characters; these are called hashes which are an irreversible representation of the original text.

	-> Encoding: Encoding is similar to hashing in that it creates what would seem to be a random string of text, but in fact, the encoding is reversible. So it begs the question, what is the point in encoding? Encoding allows us to convert binary data into human-readable text that can be easily and safely transmitted over mediums that only support plain text ASCII characters.
		-> Common encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9,+, / and the equals sign for padding.
		-> 



