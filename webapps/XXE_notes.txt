XXE(XML External Entity) attack is a vuln that abuses features of XML parsers/data. It often allows an attacker to interact with any backend or external systems that the application itself can access and can allow the attacker to read the file on that system. 
	-> They can also cause DoS attack or could use XXE to perform SSRF inducing the web app to make 	requests to make requests to other apps. It may even enable port scanning and lead to RCE.
	-> There are two types of XXE attacks: in-band and out-of-band
		1. In-band XXE attack is the one in which the attacker can receive an immediate response to 			the XXE payload
		2. Out-of-band XXE (blind XXE), there is no immediate response from the web app and attacker 
		has to reflect the output of their XXE payload to some other file or their own server.

XML (eXtensible Markup Language): markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.
	-> It is a markup language used for storing and transporting data. 
	-> XML is platform-independent and programming language independent, thus it can be used on any 	system and supports the technology change when that happens.
	-> The data stored and transported using XML can be changed at any point in time without affecting 		the data presentation.
	-> XML allows validation using DTD and Schema. This validation ensures that the XML document is free 		from any syntax error.
	-> XML simplifies data sharing between various systems because of its platform-independent nature. 		XML data doesnâ€™t require any conversion when transferred between different systems.
	
Syntax:
	1. Every XML document mostly starts with what is known as XML Prolog.
		<?xml version="1.0" encoding="UTF-8"?>
		-> Above the line is called XML prolog and it specifies the XML version and the encoding 			used in the XML document.
		-> This line is not compulsory to use but it is considered a `good practice` to put that 			line in all your XML documents.
	2. Every XML document must contain a `ROOT` element.
		<?xml version="1.0" encoding="UTF-8"?>
		<mail>
		   <to>falcon</to>
		   <from>feast</from>
		   <subject>About XXE</subject>
		   <text>Teach about XXE</text>
		</mail>
		-> <mail> is the root element and rest are children elements.
		-> If the root element is not present, then it would be considered wrong or invalid XML doc.
	
	3. XML is case sensitive language
	4. Like HTML we can use attributes in XML too. The syntax for having attributes is also very similar 		to HTML.
		<text category = "message">You need to learn about XXE</text>
		-> In the above example category is the attribute name and message is the attribute value.

DTD or Document Type Definition : A DTD defines the structure and the legal elements and attributes of an XML document.
	-> Say we have a file named note.dtd with the following content:
	<!DOCTYPE note [ <!ELEMENT note (to,from,heading,body)> <!ELEMENT to (#PCDATA)> <!ELEMENT from 		(#PCDATA)> <!ELEMENT heading (#PCDATA)> <!ELEMENT body (#PCDATA)> ]>
	
	-> Now we can use this DTD to validate the information of some XML document and make sure that the 		XML file conforms to the rules of that DTD.
	-> Ex: Below is given an XML document that uses note.dtd

	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE note SYSTEM "note.dtd">
	<note>
    	  <to>falcon</to>
    	  <from>feast</from>
    	  <heading>hacking</heading>
    	  <body>XXE attack</body>
	</note>
	-> !DOCTYPE note -  Defines a root element of the document named note
	-> !ELEMENT note - Defines that the note element must contain the elements: "to, from, heading, body"
	-> !ELEMENT to - Defines the to element to be of type "#PCDATA" 
	#PCDATA means parseable character data.
	
XXE Payloads:
	1. 
		<!DOCTYPE replace [<!ENTITY name "feast"> ]>
 			<userInfo>
  				<firstName>falcon</firstName>
  				<lastName>&name;</lastName>
			</userInfo>
		-> As we can see we are defining a ENTITY called name and assigning it a value feast. Later 			we are using that ENTITY in our code.
	
	2. We can also use XXE to read some file from the system by defining an ENTITY and having it use the 		SYSTEM keyword
	<?xml version="1.0"?>
	<!DOCTYPE root [<!ENTITY read SYSTEM 'file:///etc/passwd'>]>
	<root>&read;</root>
		-> Here again, we are defining an ENTITY with the name read but the difference is that we 			are setting it value to `SYSTEM` and path of the file.
		-> If we use this payload then a website vulnerable to XXE(normally) would display the 			content of the file /etc/passwd.
		-> In a similar manner, we can use this kind of payload to read other files but a lot of 			times you can fail to read files in this manner or the reason for failure could be the file 			you are trying to read.
	
