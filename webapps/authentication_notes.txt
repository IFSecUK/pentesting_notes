1. The very obvious method of attacking any login form is just to brute force the credentials.
	-> Using hydra, burp
2. Re-registration:
	-> Happens when the developer forgets to sanitize the input.
	-> If there is an existing user "admin", we can re-register using " admin" to get access to that 		account.
	-> Notice the space in the start.
3. JSON Web Token (JWT):
	-> Commonly used methods in authorization.
	-> It is kind of cookie generated using HMAC hashing or public/private keys. 
	-> It lets the website know what kind of access the currently logged in user has.
	-> They are JSON format (after decoding)
	
	-> It can be divided into 3 parts.
		1. Header: This consists of the algo used and the type of token.
			-> Alg could be HMAC, RSA, SHA256 or even contain None value
		Example: {  "alg": "HS256", "typ": "JWT"}
		
		2. Payload: Part that contains access given to the certain user etc. This can vary from 
			site to site, some can just have a simple username and some ID and others could have
			a lot of other details.
		3. Signature: used to make sure that the integrity of the data was maintained while 
			transferring it from a user's computer to the server and back. This is encrypted
			with whatever algorithm or alg that was passed in the header's value. And this can 
			be decrypted with a predefined secret.
		-> To put all the 3 parts together we base64 encode all of them separated by a dot.
		example: 							eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
		
	Exploitation:
		-> If you remember, in the Header section I said that the alg can be whatever the algorithm 			is used and also it can be None if no encryption is to be used
		-> Now, this should not be used when the application is in production but again the problem 			of misconfiguration comes in and make the application vulnerable to this kind of attack.
		-> The attack is that an attacker can log in as low privilege user says guest and then get 			the JWT token for that user and then decode the token and edit the headers to use set alg 			value to None.
		-> This would mean that no encryption has to be used therefore the attacker wouldn't need to 			the secret used for encryption.
	
	Practical:
		-> Login with credentials
		-> Authenticate and then turn the intercept on.
		-> capture the JWT token
		-> Decode it part by part.
		Decode "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" = {"typ":"JWT","alg":"HS256"}
		Decode "eyJleHAiOjE2MjYzMzQ2OTMsImlhdCI6MTYyNjMzNDM5MywibmJmIjoxNjI2MzM0MzkzLCJpZGVudGl0eSI6MX0" = {"exp":1626334693,"iat":1626334393,"nbf":1626334393,"identity":1}
		Decoding 3 part will give some gibberish, but we dont need it. We only need first 2 parts.
		-> Now if we notice the identity value that is probably being used to identify the user but if you'll just edit that then it won't work because as I said the 3rd part is encrypted. So to bypass this we will make changes in the header as well as the value of the identity.
		-> Encode the following string with base64 and that will be our first part
			{"typ":"JWT","alg":"NONE"}
		-> For the second part, we'll encode the following string:
			{"exp":1586620929,"iat":1586620629,"nbf":1586620629,"identity":2}
		-> Notice how we changed the value of identity from 1  to 2.
Since we placed the alg value to None we don't have to add a 3rd part or the encrypted value so we can just put a dot(.) after 2nd part and leave it like that. So the final string would look like:
		eyJ0eXAiOiJKV1QiLCJhbGciOiJOT05FIn0K.eyJleHAiOjE1ODY3MDUyOTUsImlhdCI6MTU4NjcwNDk5NSwibmJmIjoxNTg2NzA0OTk1LCJpZGVudGl0eSI6MH0K.
		-> Now open the developer's tools in your browser and edit the stored cookie of the website to this new one and then just press the Go button and you'll notice that it will prompt "Welcome user2: guest2".
		-> This kind of misconfiguration in the authentication system is common and could be exploited to escalate privileges or steal information.
		

4. No Auth
	-> A lot of time on websites we see that when we register a user and login with our credentials we are given a certain id which either is completely a number or ends with a number
	-> Most of the time developers secures their application but sometime in some places, it could happen that just by changing that number we are able to see some hidden or private data
	
	

