AWS - one of the leading cloud providers and two of its most common services are - 
	1. Amazon S3 (Simple Storage Service)
	2. AWS IAM (Identity and Access Management)

	-> AWS divides its infrastructure into Regions, mostly independent clusters of datacenters. Within each region are availability zones (AZ). 
	-> Each AZ in a region leverages separate power grids and usually are located in different flood plains. This redundancy allows you to establish highly resilient architectures to withstand significant weather or geological events, or more frequently, hardware or facility failures. 
	-> Because regions are independent - you'll get different answers to questions depending on the region you are querying. You can specify a region with the --region option to the AWS CLI.
	-> You can access AWS via the AWS Console, AWS CLI, AWS API, or the associated SDKs for your favorite programming languages. 


AWS S3
	-> Amazon S3 (Simple Storage Service) is their hosted object storage service. Objects are stored in Buckets.
	-> To highly simplify the concept of object storage, Buckets are key-value stores, with the Object Key being a full pathname for a file and the value being the contents of the file.
	->  S3 is a publicly hosted service - it doesn't exist behind a corporate firewall, making it convenient for hosting public content. AWS has an entire feature set around hosting a public website in S3.

	-> AWS Buckets use a global namespace. Only one AWS customer can create a bucket named bestfestivalcompany-images. 
	-> Amazon S3 is used for more than public hosting. It has many uses for data archive, video processing, regulatory record retention, etc. The challenge for Best Festival Company, like any enterprise using S3, is that sometimes data gets mixed up, and data that shouldn't be public gets made public.


	Discovering Bucket Names
		-> There are many ways to discover the names of Buckets. One of the easiest ways is when a company embeds content hosted in S3 on their website. Images, PDFs, etc., can all be hosted cheaply in S3 and linked from another site.
		-> These links will look like this: 
			http://BUCKETNAME.s3.amazonaws.com/FILENAME.ext
			http://s3.amazonaws.com/BUCKETNAME/FILENAME.ext
		In both these cases, it is easy to identify the name of the S3 bucket.

	Listing the Contents of Buckets
		-> Amazon S3 is one of AWS's oldest services. It's so old that it has two different methods of access control: Bucket Policies and S3 ACLs. 
		-> This leads to great confusion for developers who must manage policies, ACLs, and the differences between Any User and Authenticated Users.

		>aws s3 ls s3://[Bucket Name]/ --no-sign-request
			Here ls means list and --no-sign-request allows you to request data from S3 without being an AWS customer.

	Downloading Objects
		Using curl: curl http://irs-form-990.s3.amazonaws.com/201101319349101615_public.xml
		Using AWS cli: aws s3 cp s3://irs-form-990/201101319349101615_public.xml . --no-sign-request

		Note: Objects can be addressed with http:// or via s3://


	Different levels of Amazon S3 Authentication
		-> In Amazon S3, Object permissions are different from Bucket permissions. Bucket permissions allow you to list the objects in a bucket, while the object's permissions will enable you to download the object.
		-> Objects can be readable while the bucket is not, or the bucket can be publicly readable, but the Objects are not.
		-> Note: you can also have public write permissions to a Bucket. This is generally a bad idea and has been the vector of several crypto-mining incidents. 

		-> There are also two levels of public buckets and objects. The first level is "Anyone."
		->  The second level is just as public - and that is public to Any AWS Customer (what AWS foolishly called AuthenticatedUsers for many years). Anyone with a credit card can create an AWS account; therefore, Authenticated Users doesn't provide much data protection.


AWS IAM
	-> Excluding a few older services like Amazon S3, all requests to AWS services must be signed. This is typically done behind the scenes by the AWS CLI or the various Software development Kits that AWS provides.
	-> The signing process leverages IAM Access Keys. These access keys are one of the primary ways an AWS account is compromised.

	IAM Access key: consist of an Access Key ID and the Secret Access Key. 
		-> Access Key IDs always begin with the letters AKIA and are 20 characters long. These act as a user name for the AWS API. 
		-> The secret access key is 40 characters long. 
		-> AWS generates both strings; however, AWS doesn't make the Secret Access Key available to download after the initial generation. 

		-> There is another type of credentials, short-term credentials, where the Access Key ID begins with the letters ASIA and includes an additional string called the Session Token. 

	Reconnaissance with IAM
		-> When you find credentials to AWS, you can add them to your AWS Profile in the AWS CLI. For this, you use the command:
			>aws configure --profile PROFILENAME
		-> This command will add entries to the .aws/config and .aws/credentials files in your user's home directory


		-> Once you have configured a new profile with the new access keys, you can execute any command using this other set of credentials. For example, to list all the S3 Buckets in the AWS account you have found credentials for, try:
			>aws s3 ls --profile PROFILENAME

		ProTip: Never store a set of access keys in the [default] profile. Doing so forces you always to specify a profile and never accidentally run a command against an account you don't intend to. 

		A few other common AWS reconnaissance techniques are:
			1. Finding the Account ID belonging to an access key:
				>aws sts get-access-key-info --access-key-id AKIAEXAMPLE --profile PROFILENAME

			2. Determing the username the access-key you are using belongs to
				>aws sts get-caller-identity --profile PROFILENAME

			3. Listing all the EC2 instances 
				>aws ec2 describe-instances --output text --profile PROFILENAME

			4. Listing all the EC2 instances running in an account in a different region
				>aws ec2 describe-instances --output text --region us-east-1 --profile PROFILENAME

	AWS ARNs
		An amazon ARN is their way of generating a unique identifier for all resources in the AWS cloud. It consists of multiple strings separated by colons. 
			The format is:
				arn:aws:<service>:<region>:<account_id>:<resource_type>/<resource_name>



	Some other interesting commands:
		aws help
 	    aws <command> help
  		aws <command> <subcommand> help

  		1. aws secretsmanager list-secrets --profile [PROFILE]
  		2. aws secretsmanager get-secret-value --secret-id [NAME OF SECRET] --profile [PROFILE] --region [region_Name]


