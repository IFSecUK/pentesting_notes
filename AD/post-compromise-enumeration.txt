
	Domain Enumeration with Powerview:
		Cheatsheet for powerview: https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993
		-> place powerview powershell script in of the compromised machines.
		-> load up the script.
			>powershell -ep bypass
			>. .\PowerView.ps1
		-> Now, we will perform basic enumeration using this powershell script.
		>Get-NetDomain - Information about the domain.
		>Get-NetDomainController - information about the DCs in the domain.
		>Get-DomainPolicy - information about all the policies in the domain.
			-> Accessing parameters from the output of this command:
				>(Get-DomainPolicy)."SystemAccess"
		>Get-NetUser - Information about all the users in the domain.
			-> formatting the output:
				>Get-NetUser | select cn,samaccountname,description
		>Get-UserProperty - lists all the properties of a user.
			>Get-UserProperty -Properties pwdlastset
			>Get-UserProperty -Properties logoncount
				Note: If an account has never been logged in, guess what it might be a honeypot account.

			Note: Get-UserProperty cmdlet didn't exist in my powerview version.

		>Get-NetComputer | select dnshostname,lastlogon,pwdlastset,logoncount,operatingsystem
			-> Information about all the computers in the domain and selecting some interesting fields.
		>Get-NetGroup - information about all the domain groups.
			>Get-NetGroup -GroupName *admin*
			>Get-NetGroup | select samaccountname,name,whencreated,description
		>Get-DomainGroupMember - Information about the members of a group.
			>Get-DomainGroupMember -Identity [groupname]
		>Find-DomainShare - lists all the shares in the domain.
			>Find-DomainShare -CheckShareAccess - lists shares which current user has read access to.
		>Get-NetGPO - lists all the group policies in the domain.
			>Get-NetGPO | select displayname,whencreated,whenchanged
		>Get-NetDomainTrust - will list any domain you may access.
			-> The domain you are testing can have a trust relationship with another domain. If this is the case, you may be able to extend the scope of the reconnaissance to that domain.
		-Domain - This parameter can be used with any command followed by the name of the other domain:
			Example: Get-NetUser -Domain infra.munn.local
		>Find-LocalAdminAccess - will list systems in the domain you may have access as a local administrator.
			-> Knowing which systems the current user can access with local administrator privileges can facilitate lateral movement.

	
	Bloodhound
		-> It will basically download the data from active directory.
		-> Once it grabs all of the data from the network, it will put all that in a graph. So we will have a graphical visualization of the network.
		>apt install bloodhound
		>neo4j console
		-> username and password will be neo4j
		-> change the password, close the window and in new tab, run bloodhound.
		
		-> Now, we will download and install ingester.
		-> There are few ways to do this. 
			1. Invoke-Bloodhound in powershell (SharpHound.ps1).
			2. SharpHound in C#
			3. a python one too.


		-> Transfer SharpHound to the to the target and execute it.
			>powershell -ep bypass
			>. .\SharpHound.ps1
			>Invoke-BloodHound -CollectionMethod All -Domain MARVEL.local -ZipFileName file.zip
			Note: This method did not work in my case. I used the executable version and bloodhound imported it successfully.

		-> Once the zip file is created, transfer to your attacking machine, and we will now import the file to bloodhound.
		-> On the right side of bloodhound windows, click on upload data, and let it upload.		

		-> Now, click on butter icon on top left, and select any prebuilt queries. 

		
